# Example Software AG Products containers building pipeline
# Fork and specialize according to need

trigger:
- main

pool:
  name: WmDevOpsTutorialAgentsPool
  vmImage: Canonical:0001-com-ubuntu-confidential-vm-focal:20_04-lts-gen2:latest

variables:
  - group: ContainerImagesBuild.Options

jobs:

- job: msr1011leanOriginalApproach
  displayName: 'MSR 10.11 lean original approach'
  steps:

    # In general the provided code is reusable and will be templatized when mature enough
    # Write here the job specific parameters for now
    # This job is specialized for MSR/1011/lean
    - script: |
        JOB_SUIF_TEMPLATE="MSR/1011/lean"
        echo "Job will use SUIF template ${JOB_SUIF_TEMPLATE}"
        echo "##vso[task.setvariable variable=JOB_SUIF_TEMPLATE;]${JOB_SUIF_TEMPLATE}"
      displayName: "Init Specifics"

    # grant execution permissions to the repository scripts
    - script: find . -type f -name "*.sh" -exec chmod u+x "{}" \;
      displayName: "Grant shell execution permissions"

    # Some variables must be propagated accross steps
    - script: |
        export JOB_SUIF_TAG=$(SUIF_TAG)
        export SUIF_FIXES_DATE_TAG=$(SUIF_FIXES_DATE_TAG)
        export MY_AZ_ACR_URL=$(MY_AZ_ACR_URL)
        ./common/1.init/01.setJobInitialVariables.sh
      displayName: 'Job Locals'
    
    - script: ./common/1.init/02.getSUIF.sh
      displayName: "Get SUIF commons"

    # get SA share secrets
    - task: DownloadSecureFile@1
      name: SASecureInfo
      displayName: 'Download secure information for images share'
      inputs: 
        secureFile: 'sa.share.secrets.sh'

    # mount SA share
    - script: ./common/1.init/03.mountImagesShare.sh
      displayName: 'Mount images share'

    # update ubuntu machine
    - script: ./common/1.init/04.prepareAgentMachine.sh
      displayName: 'System software preparation'

    # assure installation binaries
    - script: ./common/2.getInput/01.assureInstallBinaries.sh
      displayName: 'Assure installation binaries'
    
    # Boostrap Update Manager
    - script: ./common/3.build/01.installSUM.sh
      displayName: 'Install SUM'

    # MSR license is required at build time
    - task: DownloadSecureFile@1
      name: msrLicense
      displayName: 'Download MSR license'
      inputs:
        secureFile: 'msr-license.xml'

    # Setup MSR 10.11 lean
    - script: ./specific/originalStyle/msr/1011/lean/01.install.sh
      displayName: 'Install MSR'

    # Containerize
    - script: ./specific/originalStyle/msr/1011/lean/02.containerize.sh
      displayName: 'Containerize MSR'

    # Service Principal is required to connect to ACR
    - task: DownloadSecureFile@1
      name: acrSpCredentials
      displayName: 'Download Service Principal Credentials'
      inputs:
        secureFile: 'acr.sp.credentials.sh'

    # Containerize
    - script: ./common/5.pushOutput/01.pushTags.sh
      displayName: 'Push tags'

    # Save audit on share 
    # HINT: ou should use this step only for debug purposes
    # HINT: without this step the mount may be readonly
    - script: ./common/6.finalize/01.saveAudit.sh
      displayName: 'Save Audit on Share'
      condition: always()

    # umount SA share
    - script: ./common/6.finalize/02.unmountShare.sh
      displayName: 'Unmount images share'
      condition: always()

- job: msr1011as1CustomApproach
  displayName: 'MSR 10.11 Adapter Set1 multi staged approach'
  steps:

    # In general the provided code is reusable and will be templatized when mature enough
    # Write here the job specific parameters for now
    # This job is specialized for MSR/1011/lean
    - script: |
        JOB_SUIF_TEMPLATE="MSR/1011/AdaptersSet1"
        echo "Job will use SUIF template ${JOB_SUIF_TEMPLATE}"
        echo "##vso[task.setvariable variable=JOB_SUIF_TEMPLATE;]${JOB_SUIF_TEMPLATE}"
      displayName: "Init Specifics"

    # grant execution permissions to the repository scripts
    - script: find . -type f -name "*.sh" -exec chmod u+x "{}" \;
      displayName: "Grant shell execution permissions"

    # Some variables must be propagated accross steps
    - script: |
        export JOB_SUIF_TAG=$(SUIF_TAG)
        export SUIF_FIXES_DATE_TAG=$(SUIF_FIXES_DATE_TAG)
        export MY_AZ_ACR_URL=$(MY_AZ_ACR_URL)
        ./common/1.init/01.setJobInitialVariables.sh
      displayName: 'Job Locals'
    
    - script: ./common/1.init/02.getSUIF.sh
      displayName: "Get SUIF commons"

    # get SA share secrets
    - task: DownloadSecureFile@1
      name: SASecureInfo
      displayName: 'Download secure information for images share'
      inputs: 
        secureFile: 'sa.share.secrets.sh'

    # mount SA share
    - script: ./common/1.init/03.mountImagesShare.sh
      displayName: 'Mount images share'

    # update ubuntu machine
    - script: ./common/1.init/04.prepareAgentMachine.sh
      displayName: 'System software preparation'

    # assure installation binaries
    - script: ./common/2.getInput/01.assureInstallBinaries.sh
      displayName: 'Assure installation binaries'

    # MSR license is required at build time
    - task: DownloadSecureFile@1
      name: msrLicense
      displayName: 'Download MSR license'
      inputs:
        secureFile: 'msr-license.xml'

    # Containerize
    - script: ./specific/multiStageStyle/msr/1011/as1/01.containerize.sh
      displayName: 'Containerize MSR Adapter Set 1'

    # Service Principal is required to connect to ACR
    - task: DownloadSecureFile@1
      name: acrSpCredentials
      displayName: 'Download Service Principal Credentials'
      inputs:
        secureFile: 'acr.sp.credentials.sh'

    # Containerize
    - script: ./common/5.pushOutput/01.pushTags.sh
      displayName: 'Push tags'

    # Save audit on share 
    # HINT: ou should use this step only for debug purposes
    # HINT: without this step the mount may be readonly
    - script: ./common/6.finalize/01.saveAudit.sh
      displayName: 'Save Audit on Share'
      condition: always()

    # umount SA share
    - script: ./common/6.finalize/02.unmountShare.sh
      displayName: 'Unmount images share'
      condition: always()